name: Clean Up Docker Containers and Images

on:
  push:
    branches:
      - main  # Replace with your branch if different
  workflow_dispatch:

jobs:
  cleanup:
    runs-on: [self-hosted, tcc-deploy]

    steps:
      - name: List running containers before cleanup
        run: |
          echo "Running containers before cleanup:"
          sudo docker ps

      - name: List Docker images before cleanup
        run: |
          echo "Docker images before cleanup:"
          sudo docker images

      - name: Stop and remove all containers
        run: |
          echo "Stopping and removing all containers..."
          sudo docker ps -aq | xargs -r sudo docker stop
          sudo docker ps -aq | xargs -r sudo docker rm

      - name: Remove all Docker images
        run: |
          echo "Removing all Docker images..."
          sudo docker images -q | xargs -r sudo docker rmi -f

      - name: Verify no containers and images remain
        run: |
          echo "Remaining containers (should be none):"
          sudo docker ps -a
          echo "Remaining images (should be none):"
          sudo docker images

      - name: Notify Slack on success
        if: success()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "attachments": [{
              "color": "good",
              "title": "*✅ Docker Cleanup Succeeded*",
              "fields": [
                { "title": "Repo", "value": "${{ github.repository }}", "short": true },
                { "title": "Branch", "value": "${{ github.ref_name }}", "short": true },
                { "title": "Commit", "value": "*${{ github.actor }}* triggered cleanup (`${{ github.sha }}`)", "short": false },
                { "title": "Workflow", "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>", "short": false },
                { "title": "Time", "value": "'"$(date -u)"'", "short": false }
              ]
            }]
          }' $SLACK_WEBHOOK

      - name: Notify Slack on failure
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "attachments": [{
              "color": "danger",
              "title": "*❌ Docker Cleanup Failed*",
              "fields": [
                { "title": "Repo", "value": "${{ github.repository }}", "short": true },
                { "title": "Branch", "value": "${{ github.ref_name }}", "short": true },
                { "title": "Commit", "value": "*${{ github.actor }}* triggered cleanup (`${{ github.sha }}`)", "short": false },
                { "title": "Workflow", "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>", "short": false },
                { "title": "Time", "value": "'"$(date -u)"'", "short": false }
              ]
            }]
          }' $SLACK_WEBHOOK

      - name: Notify Slack if unstable
        if: ${{ job.status == 'cancelled' || job.status == 'skipped' }}
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "attachments": [{
              "color": "warning",
              "title": "*⚠️ Docker Cleanup Unstable*",
              "fields": [
                { "title": "Repo", "value": "${{ github.repository }}", "short": true },
                { "title": "Branch", "value": "${{ github.ref_name }}", "short": true },
                { "title": "Commit", "value": "*${{ github.actor }}* triggered cleanup (`${{ github.sha }}`)", "short": false },
                { "title": "Workflow", "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>", "short": false },
                { "title": "Time", "value": "'"$(date -u)"'", "short": false }
              ]
            }]
          }' $SLACK_WEBHOOK
